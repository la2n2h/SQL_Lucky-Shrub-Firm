select * from Products;
+-----------+------------------------+----------+-----------+---------------+
| ProductID | ProductName            | BuyPrice | SellPrice | NumberOfItems |
+-----------+------------------------+----------+-----------+---------------+
| P1        | Artificial grass bags  |    40.00 |     50.00 |           100 |
| P2        | Wood panels            |    15.00 |     20.00 |           250 |
| P3        | Patio slates           |    35.00 |     40.00 |            60 |
| P4        | Sycamore trees         |     7.00 |     10.00 |            50 |
| P5        | Trees and Shrubs       |    35.00 |     50.00 |            75 |
| P6        | Water fountain         |    65.00 |     80.00 |            15 |
+-----------+------------------------+----------+-----------+---------------+
6 rows in set (0.00 sec)

mysql> CREATE TABLE Notifications (NotificationID INT AUTO_INCREMENT, Notification VARCHAR(255), DateTime TIMESTAMP NOT NULL, PRIMARY KEY(NotificationID));
Query OK, 0 rows affected (0.14 sec)

-- Create an INSERT trigger called ProductSellPriceInsertCheck. This trigger must check if the SellPrice of the product is less than the BuyPrice after a new product is inserted in the Products table. If this occurs, then a notification must be added to the Notifications table to inform the sales department. The sales department can then ensure that the incorrect values were not inserted by mistake.
DELIMITER //
CREATE TRIGGER ProductSellPriceInsertCheck
AFTER INSERT ON Products FOR EACH ROW
BEGIN
IF NEW.SellPrice <= NEW.BuyPrice THEN
INSERT INTO Notifications(Notification, Datetime) VALUE(CONCAT('SellPrice less than the BuyPrice was inserted for ProductID :',ProductID), NOW());
END IF;
END //
DELIMITER ;

-- Create an UPDATE trigger called ProductSellPriceUpdateCheck. This trigger must check that products are not updated with a SellPrice that is less than or equal to the BuyPrice. If this occurs, add a notification to the Notifications table for the sales department so they can ensure that product prices were not updated with the incorrect values. This trigger sends a notification to the Notifications table that warns the sales department of the issue.
DELIMITER //
CREATE TRIGGER ProductSellPriceUpdateCheck
AFTER UPDATE ON Products FOR EACH ROW
BEGIN
IF NEW.SellPrice <= NEW.BuyPrice THEN
INSERT INTO Notifications(Notification, Datetime) VALUE(CONCAT(NEW.ProductID,' was updated with a SellPrice of ', NEW.SellPrice,' which is the same or less than the BuyPrice'), NOW());
END IF;
END //
DELIMITER ;

-- Create a DELETE trigger called NotifyProductDelete. This trigger must insert a notification in the notifications table for the sales department after a product has been deleted from the Products table.
DELIMITER //
CREATE TRIGGER NotifyProductDelete 
    AFTER DELETE   
    ON Products FOR EACH ROW   
	INSERT INTO Notifications(Notification, DateTime) 
    VALUES(CONCAT('The product with a ProductID ', OLD.ProductID,' was deleted'), NOW()); 
END //
DELIMITER ;
